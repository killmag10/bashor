
.\"
.\" Man page for Bashor
.\"
.TH Bashor 7 "2011-03-20" "Lars Dietrich" "Bashor Coding Commands"
.SH Bashor
.B Bashor
\- an pseudo object extension for bash

.PD 1


.SH GENERAL FUNCTIONS
.TP
.B bufferStream()
.RS
.HP
Buffer a stream completly,
.B &0
.I mixed
input
.B &1
.I mixed
output
.B $?
.I 0
OK
.B $?
.I 1
ERROR
.RE

.TP
.B copyFunction()
.RS
.HP
Copy a function
.B $1
.I string
current function name
.B $2
.I string
new function name
.B $?
.I 0
OK
.B $?
.I 1
ERROR
.RE

.TP
.B debug()
.RS
.HP
debug message
.B $1
.I string
message
.B &3
.I string
debug messages
.RE

.TP
.B error()
.RS
.HP
error message
.B $1
.I string
message
.B $2
.I integer|null
return value for exit default=1
.B &3
.I string
error messages
.RE

.TP
.B getBacktrace()
.RS
.HP
Get a baacktrace to the current file.
.B &1
.I string
files with line number per line
.B $?
.I 0
OK
.B $?
.I 1
ERROR
.RE

.TP
.B handleError()
.RS
.HP
Handle Errors
.HP
exec 101>&1; (
.HP
COMANDS
.HP
) 2>&1 >&101 | handleError
.B &0
.I string
error stream
.RE

.TP
.B __handleError()
.RS
.HP
Error handler call
.B $1
.I string
message
.B $2
.I integer|null
return value for exit default=1
.B &3
.I string
error messages
.B $?
.I 0
OK
.B $?
.I 1
Use internal error handler
.RE

.TP
.B inList()
.RS
.HP
Check if's a value is in the array.
.B $1
.I mixed
search
.B $@
.I mixed
list of values
.B $?
.I 0
in list
.B $?
.I 1
not in list
.RE

.TP
.B isset()
.RS
.HP
Isset a var | function
.B $1
.I string
the type (var|function)
.B $2
.I string
name
.B $?
.I 0
set
.B $?
.I 1
not set
.RE

.TP
.B issetFunction()
.RS
.HP
Isset a function
.B $1
.I string
name
.B $?
.I 0
set
.B $?
.I 1
not set
.RE

.TP
.B issetVar()
.RS
.HP
Isset a var
.B $1
.I string
name
.B $?
.I 0
set
.B $?
.I 1
not set
.RE

.TP
.B prepareOutput()
.RS
.HP
Add a prefix for each line.
.B $1
.I string
prefix
.B &0
.I string
input
.B &1
.I string
prepared input
.B $?
.I 0
OK
.B $?
.I 1
ERROR
.RE

.TP
.B renameFunction()
.RS
.HP
Rename a function
.B $1
.I string
current function name
.B $2
.I string
new function name
.B $?
.I 0
OK
.B $?
.I 1
ERROR
.RE

.TP
.B signalErrBacktrace()
.RS
.HP
Backtrace for error signal
.B &1
.I string
files with line number per line
.RE

.TP
.B warning()
.RS
.HP
warning message
.B $1
.I string
message
.B &3
.I string
warning messages
.RE

.SH CLASS / OBJECT FUNCTIONS
.TP
.B addClass()
.RS
.HP
Add Class functions.
.B $1
.I string
class
.B $@
.I mixed
params
.B $?
.I 0
OK
.B $?
.I 1
ERROR
.RE

.TP
.B __autoloadClass()
.RS
.HP
Autoloader for Classes
.B $1
.I string
class
.B $?
.I 0
OK
.B $?
.I 1
ERROR
.RE

.TP
.B class()
.RS
.HP
Call a class method
.B $1
.I string
class name
.B $2
.I string
function name
.B $@
.I mixed
method params
.B $?
.I *
all of class method
.RE

.TP
.B classExists()
.RS
.HP
Check if a class exists.
.B $1
.I string
class name
.B $?
.I 0
FOUND
.B $?
.I 1
NOT FOUND
.RE

.TP
.B clone()
.RS
.HP
Clone object.
.B $1
.I string
object name
.B $2
.I string
object name
.B $?
.I *
all of class method __clone
.RE

.TP
.B extends()
.RS
.HP
Extends a class.
.B $1
.I string
class name
.B $2
.I string
parent class name
.B $?
.I 0
OK
.B $?
.I 1
ERROR
.RE

.TP
.B __hookClassRouter()
.RS
.HP
Hook for class routing.
.B $CLASS_NAME
.I string
class name what will be call
.B $?
.I 0
OK
.B $?
.I 1
ERROR
.RE

.TP
.B isObject()
.RS
.HP
Check if it is a Pointer of a object.
.B $1
.I mixed
string to check
.B $?
.I 0
OK
.B $?
.I 1
ERROR
.RE

.TP
.B loadClass()
.RS
.HP
Load class.
.B $1
.I string
namespace
.B $?
.I 0
OK
.B $?
.I 1
ERROR
.RE

.TP
.B loadClassOnce()
.RS
.HP
Load class once.
.B $1
.I string
namespace
.B $?
.I 0
OK
.B $?
.I 1
ERROR
.RE

.TP
.B new()
.RS
.HP
Create a new object from class.
.B $1
.I string
class name
.B $2
.I string
var name
.B $@
.I mixed
method params
.B $?
.I 0
OK
.B $?
.I 1
ERROR
.RE

.TP
.B object()
.RS
.HP
Call a object method
.B $1
.I string
pointer
.B $2
.I string
function name
.B $@
.I mixed
method params
.B $?
.I *
all of class method
.RE

.TP
.B parent()
.RS
.HP
Access to the parent class.
.B $1
.I string
action (call,exists)
.B $@
.I mixed
params
.B $?
.I *
all of class method
.RE

.TP
.B remove()
.RS
.HP
Remove a object.
.B $1
.I tring
pointer
.B $?
.I 0
OK
.B $?
.I 1
ERROR
.RE

.TP
.B serialize()
.RS
.HP
Serialize a object.
.B $1
.I string
pointer
.B &1
.I string
serialized data
.B $?
.I 0
OK
.B $?
.I 1
ERROR
.RE

.TP
.B this()
.RS
.HP
Access to the object.
.HP
call [method]:    call a method of the current class/object
.HP
pointer:          get the pointer of the object
.HP
get [key]:        get the contend of a var from the object/class
.HP
set [key]:        set the contend of a var from the object/class
.HP
unset [key]:      remove a var from the object/class
.HP
isset [key]:      check if a var from the object/class is set
.HP
count:            get the count of vars from the object/class
.HP
key:              get the key of a var from the object/class var list
.HP
clear:            remove all vars from a object/class
.B $1
.I string
action (call,pointer,get,set,unset,isset)
.B $@
.I mixed
params
.B $?
.I *
all of class method
.RE

.TP
.B unserialize()
.RS
.HP
Unserialize a object.
.B $1
.I string
var name
.B $2
.I string
serialized data
.B $?
.I 0
OK
.B $?
.I 1
ERROR
.RE

