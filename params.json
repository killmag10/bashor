{"name":"Bashor","tagline":"Bashor a pseudo object oriented framwork for the bash. (oop)","body":"# Bashor\r\n\r\nBashor is a pseudo object oriented framwork for the bash.\r\n\r\nBashor is a alternate way to use object orientation in a filesystem close\r\nprogramming language (Bash), to write structered scripts with many file\r\noperations what have no big attention to performance.\r\nIf you have attention to performance use nodejs. :p\r\n\r\n## Features\r\n\r\n* Create classes.\r\n* Create objects.\r\n* Inherit classes.\r\n* Autoloading classes.\r\n* Serialization of objects.\r\n* Basic classes includet.\r\n* Profiling.\r\n* Code coverage report (Bashor\\_Code\\_Coverage).\r\n\r\n## Getting Started\r\n\r\nInclude bashor in your main script file.\r\n\r\n```bash\r\nBASE_DIR=`printf '%s' \"$BASH_SOURCE\" | sed 's#/\\?[^/]*$##' | sed 's#^./##'`;\r\nif [[ ! \"$BASE_DIR\" =~ ^/ ]]; then\r\n    BASE_DIR=`printf '%s' \"$PWD/$BASE_DIR\" | sed 's#/\\.\\?$##'`;\r\nfi\r\n. \"$BASE_DIR/loader.sh\";\r\n```\r\n\r\n### API Documentation\r\n\r\nFor the API Documentation run:\r\n\r\n    make man\r\n\r\n### Configuration\r\n\r\nSet the environment variable **BASHOR\\_PATH\\_CONFIG** to load this as config\r\nscript.\r\n\r\nAdd your class paths to **BASHOR\\_PATH** seperate with ':'.\r\n\r\n#### Performance\r\n\r\n* BASHOR\\_CLASS\\_AUTOLOAD : Autoloading\r\n    * '' : Autoloading inactive\r\n    * '1' : Autoloading active (default)\r\n\r\n#### Compatibility\r\n\r\n* BASHOR\\_CODEING\\_METHOD : Internal coding method.\r\n    * base64 (default)\r\n    * hex\r\n* BASHOR\\_BASE64\\_USE : Programm used for base64 coding.\r\n    * openssl\r\n    * perl\r\n    * base64 (default)\r\n* BASHOR\\_USE\\_GETOPT : Use getopt for parameter reading.\r\n    * '' : Use getopts.\r\n    * '1' : Use getopt. (default)\r\n* BASHOR\\_COMPATIBILITY\\_THIS : Use **this** instat of **static**.\r\n    * '' : Off. (default)\r\n    * '1' : On.\r\n\r\n#### Options\r\n\r\n* BASHOR\\_INTERACTIVE : Use interactive mode.\r\n    * '' : Off. (default)\r\n    * '1' : On.\r\n* BASHOR\\_ERROR\\_CLASS : Use **Bashor\\_ErrorHandler** class for error handling.\r\n    * '' : Off.\r\n    * '1' : On. (default)\r\n    \r\n#### Profiling\r\n\r\nThe profiling format is valgrind (You can view it with kcachgrind).\r\n\r\n* BASHOR\\_PROFILE : Use profiling.\r\n    * '' : Off. (default)\r\n    * '1' : On.\r\n* BASHOR\\_PROFILE\\_FILE : File path to save profiling.\r\n\r\n### Code coverage\r\n\r\nThis is an example how you can use the code coverage:\r\n\r\n```bash\r\n    new Bashor_Code_Coverage_Writer_Html CoverageWriter \"$BASE_DIR/../codeCoverage\"\r\n    class Bashor_Code_Coverage setVerbose '1'\r\n    class Bashor_Code_Coverage start \"$BASE_DIR/../\"\r\n    ...\r\n    # your code\r\n    ...\r\n    class Bashor_Code_Coverage stop \"$CoverageWriter\"\r\n```\r\n\r\n### Use Classes/Objects\r\n\r\nExample:\r\n\r\n```bash\r\nnew Bashor_List Data\r\nobject \"$Data\" set \"test\" \"blub 123blub\"\r\nres=`object \"$Data\" get \"test\"`\r\nremove \"$Data\"\r\n```\r\n\r\n### Writing classes\r\n\r\n#### Method\r\n\r\n* Function Name:\r\n    1. \"CLASS_\"\r\n    1. Your class name. Folders seperated by \"_\".\r\n    1. \"_\" +  Method name.\r\n        * Protected starts with an extra \"_\" (tow with normal seperator).\r\n        * Magic methods starts with \"__\" (three with normal seperator).\r\n\r\n#### Magic methods\r\n\r\n* __load : Called on class loding (For static variables).\r\n* __construct : Called on object creation (new).\r\n* __destruct : Called on object destruction (remove).\r\n* __sleep : Called on object serialization (serialize).\r\n* __wakeup : Called on object unserialization (unserialize).\r\n\r\n#### Example\r\n\r\n```bash\r\n##\r\n# Loader\r\n#\r\n# Called on class loding\r\nCLASS_Class___load()\r\n{\r\n    requireStatic\r\n    return 0\r\n}\r\n\r\n##\r\n# Constructor\r\n#\r\n# Called on object creation (new)\r\nCLASS_Class___construct()\r\n{\r\n    requireObject\r\n    return 0\r\n}\r\n\r\n##\r\n# Destructor\r\n#\r\n# Called on object destruction (remove)\r\nCLASS_Class___destruct()\r\n{\r\n    requireObject\r\n    return 0\r\n}\r\n\r\n##\r\n# Make object ready for sleep.\r\n#\r\n# Called on object serialization (serialize)\r\nCLASS_Class___sleep()\r\n{\r\n    requireObject\r\n    return 0\r\n}\r\n\r\n##\r\n# Make object ready for wakeup.\r\n#\r\n# Called on object unserialization (unserialize)\r\nCLASS_Class___wakeup()\r\n{\r\n    requireObject\r\n    return 0\r\n}\r\n\r\n##\r\n# Check if the class has the over given method.\r\n#\r\n# $1    string  method name\r\n# $?    0:OK\r\n# $?    1:ERROR\r\nCLASS_Class_hasMethod()\r\n{\r\n    requireParams R \"$@\"\r\n\r\n    issetFunction CLASS_\"$CLASS_TOP_NAME\"_\"$1\"\r\n    return $?\r\n}\r\n```\r\n\r\n### Run tests\r\n\r\nTo run the tests run:\r\n\r\n    make test\r\n\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}